<Wix xmlns="http://wixtoolset.org/schemas/v4/wxs"
	 xmlns:util="http://wixtoolset.org/schemas/v4/wixutil"
	 xmlns:bal="http://wixtoolset.org/schemas/v4/wixbal"
	 xmlns:ui="http://wixtoolset.org/schemas/v4/wxs/ui"
	 xmlns:netfx="http://wixtoolset.org/schemas/v4/wixnetfx">

	<!-- Note: I had big problems getting this Wix6-Sample-Setup project 
	           to build when I changed the boilerplate code to use any
			   special dialog set, e.g. WixUI_Mondo.  After a great deal
			   of research and many false leads here is how I fixed it:

				1. From the menu select Tools / NuGet Package Manager
				                              / Manage NuGet Packages for Solution

				2. Click on the Browse tab, enter "WixToolset.UI" (without double quotes) 
				   in the search edit box.

				3. You will see WixToolset.UI.wixext.  Download that.

				4. After reading the license, agree to it and click Install.
				   You will be warned that changes are about to be made, accept them

				5. Expand the Wix6-Sample-Setup project in Solution Explorer.
				   Under Dependencies you will see WiX Extensions / WixToolset.UI

				6. In the Output window select "Show output from Package Manager".
				   You will see the following entry:
				   Installing NuGet package WixToolset.UI.wixext 6.0.0.
				   That's how you know you have the right version of the package.
				   
				7. Make sure this line is part of the <Wix xmlns collections (top of file):
				   xmlns:ui="http://wixtoolset.org/schemas/v4/wxs/ui"

                *** THE PROJECT FINALLY BUILDS SUCCESSFULLY! ***
			   -->

	<Package Id="TODO_Manufacturer.Wix6_Sample_Setup"
		     Name="Wix6-Sample App"
		     Manufacturer="FreeAndEasy Tech"
		     Version="6.0.0.0">
		    <MajorUpgrade DowngradeErrorMessage="!(loc.DowngradeError)" />

		<!-- Embed the cab file into the msi file-->
		<MediaTemplate EmbedCab="yes" />

		<!-- Just as a default we'll go with the WixUI_Minimal dialog set -->
		<!-- but you can see other values below, with sample code. -->
		<ui:WixUI Id="WixUI_Minimal" />

		<!-- LESSON LEARNED:  In order to customize the text of the standard "lorem ipsum" license,
        add the WixVariable below. -->
		<WixVariable Id="WixUILicenseRtf" Value=".\Resources\MyLicenseAgreement.rtf" />

		<!-- This is how version 3 of WiX could customize the appearance of the dialogs with some bitmaps.
		     But in WiX v6 this is done differently.  You use a Theme file.
		<Property Id="WixUIBannerBmp" Value="Resources\LogoFileGENERIC.bmp" />
		<Property Id="WixUIBannerSideBmp" Value="Resources\LogoSideFileGENERIC.bmp" />

        In WiX v6 you are supposed to be able to use a Theme file like this:
		<WixVariable Id="WixUIThemeFile" Value=".\Resources\CustomHyperlinkSidebarTheme.xml" />
		
		But this is not ready as of June 2025.
		
		*** Summary conversation with GitHub Copilot ***
		
You are correct that, as of mid-2024, the WiX Toolset v6 UI theme XML files are not published in a stable, browsable location on GitHub or included with the NuGet packages. The official WixToolset.UI repository is private or not yet available for public browsing, which means you cannot directly download sample theme XMLs for MSI dialogs as you could with WiX 3.x.
Summary of the situation:
•	There is currently no official, public source for WiX 6 UI theme XML files.
•	The WiX 6 documentation references the new theme system, but does not provide downloadable sample XMLs.
•	The only themes available are the built-in ones, which are embedded in the WiX UI extension and not user-accessible.
•	You cannot easily customize dialog bitmaps for MSI dialogs in WiX 6 without a sample theme file as a starting point.
What you can do:
•	Monitor the WiX Toolset GitHub organization and the official documentation for updates.
•	If you have access to the WiX 6 source code (for example, if it becomes public), you may be able to extract the theme XMLs from there in the future.
•	For now, you are limited to the built-in themes and cannot fully customize the MSI dialog appearance as you could in WiX 3.x.
Conclusion:
You are correct—at this time, you have reached an impasse for full dialog theming in WiX 6 unless/until the WiX team publishes the theme XMLs or makes the UI repo public.
If you need further guidance or want to explore any workarounds, let me know!
		-->
		<!--		<ui:WixUI Id="WixUI_Mondo"   /> --> 
		<!--		<ui:WixUI Id="WixUI_Minimal" /> -->
		<!--		<ui:WixUI Id="WixUI_FeatureTree" /> -->

		<!-- *** Note that if you use <ui:WixUI Id="WixUI_InstallDir"/>
		         you must define the WIXUI_INSTALLDIR property to avoid a run-time error:
		         <ui:WixUI Id="WixUI_InstallDir" />
		         <Property Id="WIXUI_INSTALLDIR" Value="INSTALLFOLDER" />  -->

		<!-- *** Note that if you use <ui:WixUI Id="WixUI_Advanced"/> 
		         you must also define the following properties or it will not compile:
                 <Property Id="ApplicationFolderName" Value="MyApplicationFolder" />
                 <Property Id="WixAppFolder" Value="WixPerUserFolder" />  -->
		<!-- You could also set the Value of WixAppFolder to "WixPerMachineFolder" 
				 but don't forget to creat a Directory in a Fragment -->
		<!--
		<ui:WixUI Id="WixUI_Advanced" />
		<Property Id="ApplicationFolderName" Value="My Application Folder" />
		<Property Id="WixAppFolder" Value="WixPerUserFolder"/>		
        -->

		<!-- *** BEGIN CUSTOM ACTIONS SECTION -->

		<!-- Custom actions are written in C# in this DLL
         PROPER WAY to do this is right-click the solution, or folder, and then:
         Add / New Project / C# Custom Action Project for WiX v3
         ESPECIALLY NOTE that the output will be something like 
         MyProjectName.CA.dll and *not* MyProjectName.dll -->
		<Binary Id="MyCustomActions"
				SourceFile="CASayHello.CA.dll">
		</Binary>

		<!-- NOTE: The CustomAction BinaryRef must be the same as the Binary Id above! -->
		<CustomAction Id="DisplayHelloDialog"
              BinaryRef="MyCustomActions"
			  DllEntry="SayHello"
			  Execute="deferred"
			  Impersonate="yes"
			  Return="ignore"
			  HideTarget="no"/>

		<InstallExecuteSequence>
			<Custom Action="DisplayHelloDialog" After="InstallInitialize"/>
		</InstallExecuteSequence>
		
		<!-- BEGIN SHORTCUT SECTION -->
		<DirectoryRef Id="ApplicationProgramsFolder">
			<Component Id="ApplicationShortcut" Guid="{7E4F7ED6-7AC5-4BD8-AEC9-3B45FEE705A8}">
				<Shortcut Id="ApplicationStartMenuShortcut"
						  Name="Wix6SampleApp"
						  Description="Best App Ever"
						  Target="[INSTALLFOLDER]Wix6SampleApp.exe"
						  Advertise="no" />
				<RemoveFolder Id="ApplicationProgramsFolder" On="uninstall"/>
				<RegistryValue Root="HKCU" Key="Software\FreeAndEasy Tech\Wix6SampleApp"
							   Name="installed" Type="integer" Value="1" KeyPath="yes" />
			</Component>
		</DirectoryRef>

	<Feature Id="Main" Title="Program Files" Level="1">
      <ComponentGroupRef Id="ExampleComponents" />
      <ComponentGroupRef Id="DummyFileToBeCopied" />
	  <ComponentRef Id="ApplicationShortcut"/>
    </Feature>
  </Package>
	
<!--
PLEASE NOTE: I TRIED TO USE THE NEW "HARVEST" CAPABILITY OF WIX VERSION 6,
             WHICH REPLACES BURN.EXE (BEING DEPRECATED).
			 BUT AS OF JUNE 1, 2025 IT IS STILL NOT READY.
			 AFTER MANY FAILED ATTEMPTS I CONSULTED GITHUB COPILOT IT SAID THIS:
			 
You are correct: as of early 2024, the WiX Toolset v6 extensions—including WixToolset.Harvest.Extension—are not yet published on nuget.org. This is a known limitation and is the root cause of your issues. The documentation and some blog posts may reference these extensions, but they are not publicly available for download or use with the wix extension add command.
Summary of the situation:
•	The WiX v6 CLI and core tools are available.
•	The official harvest extension for WiX v6 is not yet published on NuGet or elsewhere.
•	You cannot use wix harvest or any harvesting extension with WiX v6 at this time.
•	There is no official or supported workaround for harvesting in WiX v6 as of now.
What can you do?
1.	Manual authoring:
Manually create your .wxs fragments for files and directories you want to install.
2.	Use WiX 3.11 heat.exe:
You can use the heat.exe tool from WiX 3.11 to generate .wxs fragments, then include those fragments in your WiX 6 project. The XML output is compatible, but you may need to adjust some attributes or syntax.
3.	Monitor the WiX Toolset GitHub and website:
Watch for announcements about the release of the harvest extension for WiX 6.

So I asked GitHub Copilot to write the code for the old way of harvesting files
using heat.exe. It gave me this command to use in the command prompt:
	 heat dir WixHarvestSourceFiles -cg HeatGenerated -dr HeatFilesFolder -sreg -srd -scom -sfrag -suid -out WixHarvestSourceFiles.wxs

I then discovered that heat.exe is not included in the WiX v6 SDK!!

I double checked this with GitHub Copilot and it confirmed this:
Your understanding is correct—WiX 6 does not include heat.exe, 
and the new harvesting feature is not yet available. 
Many developers share your frustration about needing multiple WiX versions 
to be installed for this workflow. When WiX 6 harvesting is released, 
it should be much more streamlined. Until then, manual authoring 
or using WiX 3's heat.exe are the only options.

CONCLUDE:  This is really lame.  I'll just wait for the WiX team to finish the harvesting feature.
-->	

<!-- For historical reference, here is part of code needed for
     the old way of harvesting files (as used in WiX Toolset v3)
	<Fragment>
		<ComponentGroup Id="ProductComponents" Directory="INSTALLFOLDER">
			<ComponentGroupRef Id="HeatGenerated"  />
			<Component Id="MyRegKey1" Guid="{598171AF-21E7-4439-95FE-C3814490885E}">
			<RegistryValue Root="HKCU" Key="Software\FreeAndEasy Tech\Wix6SampleApp\Params"
                       Name="Metric1" Type="integer" Value="10" KeyPath="yes" />
			</Component>
		</ComponentGroup>
	</Fragment>
-->
</Wix>